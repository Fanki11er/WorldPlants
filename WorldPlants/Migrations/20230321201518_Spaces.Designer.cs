// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldPlants.Entities;

#nullable disable

namespace WorldPlants.Migrations
{
    [DbContext(typeof(WorldPLantsDbContext))]
    [Migration("20230321201518_Spaces")]
    partial class Spaces
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorldPlants.Entities.Space", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Spaces");
                });

            modelBuilder.Entity("WorldPlants.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorldPlants.Entities.UserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AddPlants")
                        .HasColumnType("bit");

                    b.Property<bool>("CanFertilizePlants")
                        .HasColumnType("bit");

                    b.Property<bool>("CanMistPlants")
                        .HasColumnType("bit");

                    b.Property<bool>("CanMovePlants")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRepotPlants")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWaterPlants")
                        .HasColumnType("bit");

                    b.Property<bool>("EditPlants")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("RemovePlants")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("WorldPlants.Entities.User", b =>
                {
                    b.HasOne("WorldPlants.Entities.Space", "Space")
                        .WithOne("User")
                        .HasForeignKey("WorldPlants.Entities.User", "SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("WorldPlants.Entities.UserSettings", b =>
                {
                    b.HasOne("WorldPlants.Entities.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("WorldPlants.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorldPlants.Entities.Space", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("WorldPlants.Entities.User", b =>
                {
                    b.Navigation("UserSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
